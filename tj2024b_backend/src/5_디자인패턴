
[디자인 패턴]
	- 패턴이란? 되풀이되는
	- 소프트웨어에서 설계 과정에서 자주 발생하는 문제들의 설계 유형
	- 종류
		1. 싱글톤 패턴
	
[싱글톤 패턴]
	1. 정의 : 프로그램내 객체(인스턴스)가 단 하나만 존재하는 패턴/설계
	2. 목적 : 하나의 객체(인스턴스)를 만들고 메모리 공유
		- 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
		- 협업에 있어서 굳이 여러개 객체(인스턴스)가 필요 없는 경우, 기능역할 1개
	3. 싱글톤 만들기
		1단계 : 지정한 클래스에 디폴트생성자를 private 한다.
			private 생성자명(){}
		2단계 : 지정한 클래스에 private static 으로 객체(인스턴스) 선언하기
			private static 클래스명 멤버변수 = new 생성자명;
		3단계 : 지정한 클래스에 public static 클래스명 getInstance(){} 선언한다.
			public static 반환타입 getInstance(){
				return 멤버변수;
			}
	
	4. 다른 클래스에서 싱글톤 호출하기
		클래스명.getInstance();
		
[MVC 패턴]
	1. 목적 : 프로젝트를 설계할 때 복잡한 코드와 파일들을 MVC 패턴에 따라 구성하는 방법
	2. 정의 : 소프트웨어 개발에서 사용되는 디자인 패턴으로 세가지 주요 역할 분리하고 코드의 모듈화와 유지보수성 높인다.
	3. 장점 : 협업, 유지보수, 모듈화, 단일기능 제공 등등
	4. 단점 : 분리함으로써 파일이 많아지므로 파일 관리 복잡도 높다. 
		- 예] 
			- 1인식당(사장님이 서빙하고 요리하고 재료준비) : 식당 규모가 작으니까 혼자서도 운영이 가능하다.
			- 직원이있는식당(서빙직원, 요리직원, 재료직원) : 식당 규모가 커지면 여러명에서 운영한다.
				- 직원들에게 업무분담을 하는이유? 전문성, 문제파악, 문제해결 등등
				
			- 소규모 프로그램은 하나의 클래스에서도 운영가능하지만
			- 대규모 프로그램은 여러개의 클래스로 운영한다.
				- 클래스들을 각각 분리하는 이유 ? 문제가 발생했을때 유지보수성 높일 수 있다. 
				
	5. 세가지 역할
		M(Model) : 데이터 관리 담당
			1. 주로 웹/앱에서는 JAVA 언어(백엔드)
			2. 데이터베이스(DB/데이터)와 상호작용
			3. 주요 키워드
				DAO(Data Access Object)			: 데이터베이스와 상호작용을 담당하는 객체
				DTO(Data Transfer Object)		: 서로 다른 레이어/계층 간의 데이터를 이동한 객체
			4. 관례적인 규칙
				- DAO 객체는 굳이 여러개 객체가 필요없다. - 싱글톤 적용 가능하다
				- DTO 객체는 여러개 객체가 필요하다. - 싱글톤 적용 불가능, 단일 객체, 복수 객체 = 배열, 컬렉션프레임워크 사용
				- (console 프로젝트) print, scan 함수 불가능. 단] 개발 테스트 목적으로 사용가능
		
		V(View) : 입출력 담당
			1. 주로 웹/앱에서는 HTML/CSS/JS 언어(프론트엔드)
			2. 사용자로부터 입력과 출력
			3. 관례적인 규칙
				- (console 프로젝트) : view 클래스에서만 print 출력, scan 입력 함수 사용한다.
		
		C(Controller) : Model 과 View 사이의 제어, 전달, 유효성 검사 담당
			1. 주로 웹/앱에서는 JAVA언어(백엔드)
			2. 사용자로(view)부터 요청받아 model 에게 전달하고 결과를 받는다
			3. 주요 키워드
				MVC 패턴 		: controller
				MVC2 패턴 3티어 	: controller + service
			4. 관례적인 규칙
				- (console 프로젝트) print, scan 함수 불가능. 단] 개발 테스트 목적으로 사용가능. - 데이터베이스 접근 불가능.
				
	6. 세가지 역할 흐름도
		[요청] 사용자 ---> VIEW --DTO--> CONTROLLER --DTO--> MODEL(DAO)
		[응답] MODEL(DAO) --DTO--> CONTROLLER --DTO--> VIEW ---> 사용자	
		
		[주의할점] : 개발자 위 흐름순서가 다르게 코드 작성이 가능하지만 관례적인 패턴 규칙으로 위 흐름으로 코드를 작성해야한다.	
		
[실습 예1]
	- day13 패키지 Spring 패턴
		- boardprogram8 패키지
			- controller 패키지
				- BoardController 클래스		*싱글톤O , 입력받은 게시물정보를 받아 DAO 에게 전달 담당하는 클래스 
			- model 패키지
				- dao 패키지
					- BoardDao 클래스			*싱글톤O , (데이터 관련)기능 처리를 담당하는 클래스
				- dto 패키지
					- BoardDto 클래스			*싱글톤X , 서로 다른 클래스간의 데이터 이동 시 사용되는 클래스
			- view 패키지
				- BoardView 클래스			*싱글톤O , 게시물의 입출력을 담당하는 클래스
			- AppStart 클래스					*싱글톤X , 프로그램 시작하는 클래스(main)
				
				