[변수]
    - 변하는 수
    - 값을 넣을 수 있는 빈 그릇과 같다.
    1. 변수 형태
        자료형 변수명 = 리터럴;
    2. 변수 선언
        1. 선언 : 자료형 변수명;
        2. 초기화 : 자료형 변수명 = 리터럴;
    3. 변수명 주의할점
        1. 숫자로 시작 x
        2. 특수문자 _와 $ 사용, 띄어쓰기 X
        3. 키워드(예약어) : if, for, int 등
        * 카멜표기법 : 소문자로 시작하고 두번째 단어는 첫글자를 대문자
        numberofstudent -> numberOfStudent
    4. 변수의 값 호출
    	변수명
    5. 변수의 값 수정
    	변수명 = 새로운 값;
[리터럴]
	- 데이터 그자체, 키보드로부터 입력한 자료
	- 자바 리터럴은 : 논리[boolean], 문자[char], 정수[int], 실수[double]
[자료형]
	- 타입, 자료의 형식, 자료를 분류하는 방법
	1. 목적 : 타입의 저장범위를 고려하여 저장할 데이터를 적합하게 선택하여 사용하므로 효율성을 높일 수 있다.(설계)
	 - 자바 기본 타입
		 		  [키워드]    [용량]  [저장범위]
		 	[논리] boolean	1바이트 true/false
		 	
		 	[문자] char		2바이트 유니코드, 'A', 작은따옴표로 감싼 한글자
		 		  String	N바이트 문자열클래스 , "ABC" , 큰따옴표로 감싼 문자열
		 	
		 	[정수] byte		1바이트 -128~+127
		 		  short		2바이트 -32768~+32767
		 		  int		4바이트 -2^31~+(2^31)-1 21억정도, 리터럴정수(키보드로 입력한 정수), 정수기본타입
		 		  long		8바이트 -2^63~+(2^63)-1 21억 이상, 리터럴 정수 뒤에 L/l 붙이기
		 	
		 	[실수, 부동소수점] 
		 		  float		4바이트 소수점 8자리 표현, 실수리터럴 뒤에 F/f붙이기
		 		  double	8바이트 소수점 17자리 표현, 실수리터럴, 실수중에 기본 타입
		 	
		 	* 타입 목적: 메모리 효율적으로 적절하게 선택하여 사용하자(설계)
		 	
[부동 소수점]
	* 0과 1 사이의 실수는 끝없는 무한대 표현 가능하므로, 컴퓨터 한게를 만들었다.
	- 지수부 : 숫자의 크기를 조정하는 역할 ex] 몇승
	- 가수부 : 숫자의 유효 자릿수를 표현 ex] 숫자 자체
	float : 부호 1비트 지수부 8비트, 가수부 23비트
	double : 부호 1비트 지수부 11비트, 가수부 52비트
		ex] 데이터 : 1000000 기수 : 1, 지수 : 6(10을6번 곱해야함), 1.0*10^6
	- 실제 연산이 중요한 부분에 업무에서는 실수타입 사용하는데 한계(오차) : 해결법 : 라이브러리 BigDeimal 또는 문자열 처리
	
[상수]
	- 초기화 이후 변하지 않는 값
	- final 키워드
	- 상수명은 관례적으로 대문자로 사용한다.

[리터럴]
	- 개발자가 키보드로부터 입력한 숫자, 문자, 논리 등등 일컫는말
	- 자바는 이러한 리터럴값들을 상수풀(메모리공간)이라는 곳에서 *상수*로 저장한다.
	
[타입 변환]
	1. 자동 타입 변환, 목시적 형 변환
		 - 1. 메모리 크기가 작은 것 부터 큰 순으로 변환
		 - 2. 데이터의 손실이 없다
		 - 3. 연산(계산)중에 큰 값으로 변환된다.(메모리 손실 방지)
		 byte -> short, char -> int -> long -> float -> double
		 + 연산중에 묵시적 형변환 , 연산시 피연산자중에 더 큰 타입으로 결과를 반환한다.
		 byte + byte => int , int이하 byte와 short 연산 결과는 무조건 int 반환
		 byte + short => int
		 int + int => int
		 int + long => long
		 int + float => float
		 float + double => double
	2. 강제 타입 변환, 명시적 형 변환
		 - 1. 메모리 크기가 큰값부터 작은 순으로 변환
		 - 2. 데이터의 (허용범위 외)손실이 있을수도 있다.
		 - 3. (변환할타입명)변수명, (반환할타입명)리터럴값
		 - double -> float -> long -> int -> short, char -> byte